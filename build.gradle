buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.edu.sc.seis:macAppBundle:2.2.1"
        classpath "be.insaneprogramming.gradle:animalsniffer-gradle-plugin:1.4.0"
        classpath "gradle.plugin.net.minecrell:licenser:0.3"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.3"
    }
}
apply plugin: "net.minecraftforge.gradle.launch4j"

apply plugin: 'java'
apply plugin: 'maven'

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// id 'net.minecraftforge.gradle.launch4j' version '2.3-SNAPSHOT'
apply plugin: 'edu.sc.seis.macAppBundle'
apply plugin: 'be.insaneprogramming.gradle.animalsniffer'

apply plugin: 'net.minecrell.licenser'
apply plugin: 'com.github.johnrengelman.shadow'


configurations {
    deployerJars
}

repositories {
    mavenCentral()
    maven {
        name = 'Mojang libs'
        url = 'https://libraries.minecraft.net/'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'org.swinglabs.swingx:swingx-all:1.6.4'
    compile 'com.miglayout:miglayout-swing:4.2'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.mojang:authlib:1.5.22'
    compile 'org.apache.logging.log4j:log4j-api:2.0-beta9'
    compile 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    compile 'org.projectlombok:lombok:1.12.6'
    compile 'com.google.guava:guava:18.0'
    compile 'com.beust:jcommander:1.30' // TODO: update to 1.48 or higher as soon as we drop java 6 support
    compile 'com.google.code.findbugs:jsr305:1.3.9' //nonnull annotations
    compile 'org.tukaani:xz:1.5' // LZMA support
    compile 'net.java.dev.jna:jna:4.1.0'
    compile 'com.github.oshi:oshi-core:4.1.1'
    compile 'org.slf4j:slf4j-simple:1.7.28'
    //commons lang3 via authlib
    //commons io via authlib
    testCompile 'junit:junit:4.12'
    // something depends mockito-all => core not needed
    //testCompile 'org.mockito:mockito-core:1.+'
    testCompile 'org.powermock:powermock-module-junit4:1.6.3'
    testCompile 'org.powermock:powermock-api-mockito:1.6.3'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.3'
    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

project.ext {
    mainClass = 'net.ftb.main.Bootstrap'
    currentYear = '2018'
}
if (System.getenv().BUILD_NUMBER != null) {
    ext.buildNum = System.getenv().BUILD_NUMBER
} else {
    ext.buildNum = "9999999"
}

processResources {
    inputs.property "LauncherJenkins", project.buildNum
    inputs.property "GitSHA", project.getCheckedOutGitCommitHash()
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.properties'
        expand 'LauncherJenkins': project.buildNum, 'GitSHA': project.getCheckedOutGitCommitHash()
    }
    // copy everything else, thats not text
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.properties'
    }

}
group = 'net.ftb'
version = "1.5.0-${project.buildNum}"
description = "FTB Launcher"
sourceCompatibility = 1.6
targetCompatibility = 1.6

animalsniffer {
    signature = "org.codehaus.mojo.signature:java16:+@signature"
    // this probably does not ignore tests from net.ftb.j7.* It ignores tests with dependencies to net.ftb.j7.  @See
    // @IgnoreJRERequirement if not working
    ignores = ["net.ftb.j7"]

}

shadowJar {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    dependencies {
        exclude(dependency('com.mojang:authlib'))
        exclude(dependency('org.projectlombok:lombok'))
    }
    classifier = ''
}
task copyMainJar(type: Copy) {
    from("${buildDir}/libs/")
    destinationDir = file("${buildDir}/macApp/Feed The Beast.app/Contents/Java")
    rename { String fileName ->
        fileName.replace("-${version}", '')
    }
    rename(/(.+)-${version}(.+)/, '$1$2')

}

assemble.dependsOn.remove(createDmg)
build.dependsOn.remove(createDmg)
createApp.dependsOn.remove(copyToResourcesJava)
//build.dependsOn(zipApp)
//zipApp.dependsOn(createApp)
build.dependsOn(createAppZip)
build.dependsOn(licenseFormat)
createApp.dependsOn(copyMainJar)
copyMainJar.dependsOn(shadowJar)
shadowJar.dependsOn(jar)

afterEvaluate {
    launch4j {
        icon = file("src/main/resources/exe/icon.ico").getCanonicalPath()
        jreMinVersion = '1.6.0'
        jar = project.tasks.jar.getArchivePath().getPath()
        outfile = project.tasks.jar.getArchivePath().getPath().replace(".jar", ".exe")
        mainClassName = project.mainClass
        initialHeapPercent = 5;
        maxHeapPercent = 100;
    }
}

artifacts {
    archives file(project.tasks.jar.getArchivePath().getPath().replace(".jar", ".exe"))
    archives file(project.tasks.jar.getArchivePath().getPath().replace(".jar", ".zip").replace("libs", "distributions"))
}

macAppBundle {
    mainClassName = project.mainClass
    appName = "Feed The Beast"
    icon = "src/main/resources/app/icon.icns"
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    bundleExtras.put("NSHighResolutionCapable", "true")
}

jar {
    manifest {
        attributes 'Main-Class': project.mainClass, 'Launcher-Jenkins': project.buildNum
    }
}

// e.g. ./gradlew --daemon  runshadow -Pargs="--help"
task runShadow() {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir" + File.separator + ".git" + File.separator
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     * in case of detached head: the currently checked out commit hash
     * otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":")
    // .git/HEAD
    def isCommit = head.length == 1
    // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1 // ref: refs/heads/master

    if (isCommit) {
        return head[0].trim().take(takeFromHash)
    } // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim())
    // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact file(project.tasks.jar.getArchivePath().getPath().replace(".jar", ".exe"))
            artifact file(project.tasks.jar.getArchivePath().getPath().replace(".jar", ".zip").replace("libs", "distributions"))
        }
    }

    repositories {
        maven {
            if (project.hasProperty("s3_url")) {
                url "s3://${s3_url}"

                credentials(AwsCredentials) {
                    accessKey "${s3_key}"
                    secretKey "${s3_secret}"
                }
            }
        }
    }
}
if (project.hasProperty("local_maven")) {
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file://${local_maven}")
            }
        }
    }
}
if (project.hasProperty("remote_maven") && project.hasProperty("sftp_pass")) {
    uploadArchives {
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "sftp://${remote_maven}") {
                authentication(userName: "${ftp_username}", password: "${sftp_pass}")
            }
        }
    }
}

license {
    header file('licenseheader.txt')
    include '**/*.java'
    exclude 'net/ftb/util/Parallel.java'
    exclude 'net/ftb/tracking/**/*.java'
    exclude 'net/ftb/util/winreg/**/*.java'
    exclude 'net/ftb/gui/SmartScroller.java'
    exclude 'net/ftb/util/ComparableVersion.java'
    exclude 'net/ftb/util/Comparable*VersionTest.java'
    newLine = false
}
